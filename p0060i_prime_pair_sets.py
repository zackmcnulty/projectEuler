# logic: try to be smart with our comparisons. It is well know that if the digits of a number
# sum to something divisble by three, the number will be divisible by three. Create two lists of primes
# one where the primes are of form 6k - 1 and one for 6k + 1

# create two groups, one for the primes that are congruent to 2 modulo 3 and one for 1 modulo 3 (the prime
# 3 is a special case that is in neither of these groups). For two primes to be appendedable like in the question
# They MUST be in the same group. Else, their digits will add to a multiple of 3.

# Now that I have lists of nums that each prime is appendable with, begin the search! 

import time
import pyprimes as pp 

def isPrime(n):
    for div in range(2,int(n**0.5)+1):
        if n % div == 0: return False
    else:
        return True

max_n = 1000

# 3 is a special prime not generated by this
primes2 = [3]
primes1 = [3]

for k in range(1, max_n // 6 + 1):
    next2 = 6*k - 1
    next1 = 6*k + 1
    
    if isPrime(next2):
        primes2.append(next2)
    if isPrime(next1):
        primes1.append(next1)


primes2_keys = {p:[] for p in primes2}
primes1_keys = {p:[] for p in primes1}

for i, p1 in enumerate(primes2):
    for p2 in primes2[i+1:]:
        if isPrime(int(str(p1) + str(p2))) and isPrime(int(str(p2) + str(p1))):
            primes2_keys[p1].append(p2)
            primes2_keys[p2].append(p1)

for i, p1 in enumerate(primes1):
    for p2 in primes1[i+1:]:
        if isPrime(int(str(p1) + str(p2))) and isPrime(int(str(p2) + str(p1))):
            primes1_keys[p1].append(p2)
            primes1_keys[p2].append(p1)

    
