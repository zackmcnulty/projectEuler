import numpy as npclass PointCollection:    def __init__(self, tolerance, start, win):        self.items = [start]        self.size = 0        self.tol = tolerance        self.edges = {}        self.lastPoint = start        self.win = win        Circle(startPoint, 4).draw(win)    def add(self, other):        print(self.items)        self.items = self.items + [other]        self.size += 1    def contains(self, point):        for k in range(self.size):            if np.absolute(self.items[k].x - point.x) < self.tol and np.absolute(self.items[k].y - point.y) < self.tol:                print("No new connection made")                return True        return False    def drawSelf(self, newPt):        Circle(newPt, 4).draw(self.win)        newPt.draw(self.win)        line = Line(newPt, self.lastPoint)        line.draw(self.win)        self.lastPoint = newPtfrom graphics import *win = GraphWin("My Window is better than yours", 400,400)startPoint = win.getMouse()pList = PointCollection(5, startPoint, win)while win.isOpen():    newPt = win.getMouse()    if not pList.contains(newPt):        pList.add(newPt)        pList.drawSelf(newPt)